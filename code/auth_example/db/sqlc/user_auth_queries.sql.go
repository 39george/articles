// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_auth_queries.sql

package sqlc

import (
	"context"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_groups(user_id, group_id)
VALUES ($1, (
    SELECT id FROM groups WHERE name = $2
))
`

type AddUserToGroupParams struct {
	UserID int32  `db:"user_id" json:"user_id"`
	Name   string `db:"name" json:"name"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.Exec(ctx, addUserToGroup, arg.UserID, arg.Name)
	return err
}

const getAuthUserData = `-- name: GetAuthUserData :one
SELECT id, username, password_hash
FROM users
WHERE username = $1 OR id = $2
`

type GetAuthUserDataParams struct {
	Username *string `db:"username" json:"username"`
	ID       *int32  `db:"id" json:"id"`
}

type GetAuthUserDataRow struct {
	ID           int32  `db:"id" json:"id"`
	Username     string `db:"username" json:"username"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
}

func (q *Queries) GetAuthUserData(ctx context.Context, arg GetAuthUserDataParams) (GetAuthUserDataRow, error) {
	row := q.db.QueryRow(ctx, getAuthUserData, arg.Username, arg.ID)
	var i GetAuthUserDataRow
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT DISTINCT permissions.name
FROM users
JOIN user_groups
ON users.id = user_groups.user_id
JOIN group_permissions
ON user_groups.group_id = group_permissions.group_id
JOIN permissions
ON group_permissions.permission_id = permissions.id
WHERE users.id = $1
`

func (q *Queries) GetUserPermissions(ctx context.Context, id int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserToDb = `-- name: InsertUserToDb :one
INSERT INTO users (username, password_hash, email) 
VALUES ($1, $2, $3) RETURNING id
`

type InsertUserToDbParams struct {
	Username     string `db:"username" json:"username"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
	Email        string `db:"email" json:"email"`
}

func (q *Queries) InsertUserToDb(ctx context.Context, arg InsertUserToDbParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUserToDb, arg.Username, arg.PasswordHash, arg.Email)
	var id int32
	err := row.Scan(&id)
	return id, err
}
